#CREATE SCHEMA GRADEBOOK;

# Task 2: Write the commands for creating tables and inserting values
DROP TABLE IF EXISTS STUDENT;
CREATE TABLE GRADEBOOK.STUDENT (
  FirstName varchar(255) DEFAULT NULL,
  LastName varchar(255) DEFAULT NULL,
  StudentID int UNSIGNED NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (StudentID)
);

DROP TABLE IF EXISTS SCORE;
CREATE TABLE GRADEBOOK.SCORE (
    StudentID int UNSIGNED NOT NULL,
    AssignmentID int UNSIGNED NOT NULL,
    POINTS int UNSIGNED DEFAULT 0 NOT NULL,
    PRIMARY KEY (StudentID, AssignmentID)
);

DROP TABLE IF EXISTS ASSIGNMENT;
CREATE TABLE GRADEBOOK.ASSIGNMENT (
    AssignmentID int unsigned NOT NULL UNIQUE AUTO_INCREMENT,
    DistributionID int unsigned NOT NULL,
    Instance int unsigned NOT NULL,
    PointsPossible int unsigned DEFAULT 0 NOT NULL,
    PRIMARY KEY (AssignmentID)
);

DROP TABLE IF EXISTS DISTRIBUTION;
CREATE TABLE GRADEBOOK.DISTRIBUTION (
    DistributionID int UNSIGNED NOT NULL UNIQUE,
    CourseID int UNSIGNED NOT NULL,
    Category varchar(30) NOT NULL,
    Percentage int UNSIGNED NOT NULL,
    PRIMARY KEY(DistributionID)
);


DROP TABLE IF EXISTS ENROLLMENT;
CREATE TABLE GRADEBOOK.ENROLLMENT (
    StudentID int UNSIGNED NOT NULL,
    CourseID int UNSIGNED NOT NULL,
    PRIMARY KEY (StudentID, CourseID)
);

DROP TABLE IF EXISTS COURSE;
CREATE TABLE GRADEBOOK.COURSE (
    Department varchar(255) NOT NULL,
    CourseNumber int UNSIGNED NOT NULL,
    CourseName varchar(255) NOT NULL,
    Term varchar(255) NOT NULL,
    Year int UNSIGNED NOT NULL,
    CourseID int UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    PRIMARY KEY(CourseID)
);

INSERT INTO STUDENT VALUES('Stephen', 'Curry', 30);
INSERT INTO STUDENT VALUES('Draymond', 'Green', 23);
INSERT INTO STUDENT VALUES('Andrew', 'Wiggins', 22);
INSERT INTO STUDENT VALUES('Kelly', 'Qubre', 12);
INSERT INTO STUDENT VALUES('James', 'Wiseman', 32);
INSERT INTO STUDENT VALUES('Jordan', 'Poole', 3);

INSERT INTO COURSE VALUES('Math', 157, 'Calculus II', 'Fall', 2017, 1234);
INSERT INTO COURSE VALUES('Computer Science', 135, 'Computer Science I', 'Spring', 2018, 2345);
INSERT INTO COURSE VALUES('Chemistry', 004, 'General Chemistry II', 'Spring', 2018, 3456);
INSERT INTO COURSE VALUES('English', 009, 'Technical Writing', 'Fall', 2020, 4567);
INSERT INTO COURSE VALUES('Computer Science', 432, 'Database Systems', 'Spring', 2021, 5678);

INSERT INTO ENROLLMENT VALUES(30, 1234);
INSERT INTO ENROLLMENT VALUES(23, 1234);
INSERT INTO ENROLLMENT VALUES(22, 1234);
INSERT INTO ENROLLMENT VALUES(12, 1234);
INSERT INTO ENROLLMENT VALUES(32, 1234);
INSERT INTO ENROLLMENT VALUES(3, 1234);
INSERT INTO ENROLLMENT VALUES(30, 2345);
INSERT INTO ENROLLMENT VALUES(23, 2345);
INSERT INTO ENROLLMENT VALUES(22, 2345);
INSERT INTO ENROLLMENT VALUES(12, 2345);
INSERT INTO ENROLLMENT VALUES(32, 2345);
INSERT INTO ENROLLMENT VALUES(3, 2345);
INSERT INTO ENROLLMENT VALUES(30, 3456);
INSERT INTO ENROLLMENT VALUES(30, 4567);
INSERT INTO ENROLLMENT VALUES(30, 5678);
INSERT INTO ENROLLMENT VALUES(23, 4567);

INSERT INTO DISTRIBUTION VALUES(1, 1234, 'Participation', 10);
INSERT INTO DISTRIBUTION VALUES(2, 1234, 'Homework', 20);
INSERT INTO DISTRIBUTION VALUES(3, 1234, 'Tests', 50);
INSERT INTO DISTRIBUTION VALUES(4, 1234, 'Projects', 20);
INSERT INTO DISTRIBUTION VALUES(5, 2345, 'Participation', 15);
INSERT INTO DISTRIBUTION VALUES(6, 2345, 'Homework', 15);
INSERT INTO DISTRIBUTION VALUES(7, 2345, 'Tests', 55);
INSERT INTO DISTRIBUTION VALUES(8, 2345, 'Projects', 15);
INSERT INTO DISTRIBUTION VALUES(9, 3456, 'Participation', 5);
INSERT INTO DISTRIBUTION VALUES(10, 3456, 'Homework', 25);
INSERT INTO DISTRIBUTION VALUES(11, 3456, 'Tests', 45);
INSERT INTO DISTRIBUTION VALUES(12, 3456, 'Projects', 25);
INSERT INTO DISTRIBUTION VALUES(13, 4567, 'Participation', 20);
INSERT INTO DISTRIBUTION VALUES(14, 4567, 'Homework', 20);
INSERT INTO DISTRIBUTION VALUES(15, 4567, 'Tests', 40);
INSERT INTO DISTRIBUTION VALUES(16, 4567, 'Projects', 20);
INSERT INTO DISTRIBUTION VALUES(17, 5678, 'Participation', 25);
INSERT INTO DISTRIBUTION VALUES(18, 5678, 'Homework', 25);
INSERT INTO DISTRIBUTION VALUES(19, 5678, 'Tests', 25);
INSERT INTO DISTRIBUTION VALUES(20, 5678, 'Projects', 25);

INSERT INTO ASSIGNMENT VALUES(1, 1, 1, 100);
INSERT INTO ASSIGNMENT VALUES(2, 2, 1, 50);
INSERT INTO ASSIGNMENT VALUES(3, 2, 2, 50);
INSERT INTO ASSIGNMENT VALUES(4, 3, 1, 100);
INSERT INTO ASSIGNMENT VALUES(5, 3, 2, 100);
INSERT INTO ASSIGNMENT VALUES(6, 4, 1, 100);

INSERT INTO SCORE VALUES(30, 1, 95);
INSERT INTO SCORE VALUES(30, 2, 50);
INSERT INTO SCORE VALUES(30, 3, 40);
INSERT INTO SCORE VALUES(30, 4, 80);
INSERT INTO SCORE VALUES(30, 5, 90);
INSERT INTO SCORE VALUES(30, 6, 75);
INSERT INTO SCORE VALUES(23, 1, 90);
INSERT INTO SCORE VALUES(23, 2, 45);
INSERT INTO SCORE VALUES(23, 3, 35);
INSERT INTO SCORE VALUES(23, 4, 75);
INSERT INTO SCORE VALUES(23, 5, 85);
INSERT INTO SCORE VALUES(23, 6, 70);
INSERT INTO SCORE VALUES(22, 1, 85);
INSERT INTO SCORE VALUES(22, 2, 40);
INSERT INTO SCORE VALUES(22, 3, 30);
INSERT INTO SCORE VALUES(22, 4, 70);
INSERT INTO SCORE VALUES(22, 5, 80);
INSERT INTO SCORE VALUES(22, 6, 65);
INSERT INTO SCORE VALUES(12, 1, 50);
INSERT INTO SCORE VALUES(12, 2, 25);
INSERT INTO SCORE VALUES(12, 3, 20);
INSERT INTO SCORE VALUES(12, 4, 40);
INSERT INTO SCORE VALUES(12, 5, 45);
INSERT INTO SCORE VALUES(12, 6, 35);
INSERT INTO SCORE VALUES(32, 1, 70);
INSERT INTO SCORE VALUES(32, 2, 35);
INSERT INTO SCORE VALUES(32, 3, 25);
INSERT INTO SCORE VALUES(32, 4, 60);
INSERT INTO SCORE VALUES(32, 5, 70);
INSERT INTO SCORE VALUES(32, 6, 50);
INSERT INTO SCORE VALUES(3, 1, 60);
INSERT INTO SCORE VALUES(3, 2, 45);
INSERT INTO SCORE VALUES(3, 3, 37);
INSERT INTO SCORE VALUES(3, 4, 54);
INSERT INTO SCORE VALUES(3, 5, 72);
INSERT INTO SCORE VALUES(3, 6, 63);

# Task 3: Show the tables with the contents that you have inserted
SELECT * FROM STUDENT;
SELECT * FROM COURSE;
SELECT * FROM ENROLLMENT;
SELECT * FROM DISTRIBUTION;
SELECT * FROM SCORE;

# Task 4: Compute the average/highest/lowest score of an assignment
SELECT A.AssignmentID, AVG(S.POINTS), MAX(S.POINTS), MIN(S.POINTS)
FROM ASSIGNMENT A, SCORE S WHERE A.AssignmentID=2 AND S.AssignmentID=A.AssignmentID;

# Task 5: List all of the students in a given course
SELECT E.CourseID, S.StudentID, S.FirstName, S.LastName
FROM STUDENT S JOIN ENROLLMENT E WHERE E.CourseID = 1234 AND S.StudentID = E.StudentID;

# Task 6: List all of the students in a course and all of their scores on every assignment
SELECT S.StudentID, S.FirstName, S.LastName, E.CourseID, G.AssignmentID, G.POINTS
FROM STUDENT S, ENROLLMENT E, SCORE G
WHERE S.StudentID = G.StudentID AND G.StudentID = E.StudentID AND E.CourseID = 1234;

# Task 7: Add an assignment to a course
INSERT INTO ASSIGNMENT VALUES(7, 4, 2, 100);

# Task 8: Change the percentages of the categories for a course
UPDATE DISTRIBUTION SET Percentage = 30 WHERE CATEGORY = 'Homework';

# Task 9: Add 2 points to the score of each student on an assignment
UPDATE SCORE SET POINTS = POINTS + 2 WHERE AssignmentID = 2;

# Task 10: Add 2 points just to those students whose last name contains a ‘Q’
UPDATE SCORE
SET POINTS = POINTS + 2
WHERE SCORE.StudentID = (SELECT StudentId FROM STUDENT WHERE
SCORE.StudentID = SCORE.StudentID AND STUDENT.LastName LIKE '%Q%');

# Task 11: Compute the grade for a student
SELECT SUM((G.POINTS) * (D.Percentage/C.COUNTER)/PointsPossible)
AS FINAL_GRADE
FROM SCORE G
LEFT JOIN ASSIGNMENT A ON G.AssignmentID = A.AssignmentID
JOIN DISTRIBUTION D ON D.DistributionID = A.DistributionID
JOIN (SELECT D.DistributionID, COUNT(*) AS COUNTER FROM SCORE G
	LEFT JOIN ASSIGNMENT A ON G.AssignmentID = A.AssignmentID
    JOIN DISTRIBUTION D ON D.DistributionID = A.DistributionID
    WHERE CourseID=1234 AND StudentID=30 GROUP BY
    D.DistributionID)
    C ON C.DistributionID = D.DistributionID
WHERE CourseID=1234
AND StudentID=30;

# Task 12: Compute the grade for a student, where the lowest score for a given category is dropped
SELECT SUM((G.POINTS) * (D.Percentage/C.COUNTER)/PointsPossible)
AS FINAL_GRADE
FROM SCORE G
LEFT JOIN ASSIGNMENT A ON G.AssignmentID = A.AssignmentID
JOIN DISTRIBUTION D ON D.DistributionID = A.DistributionID
JOIN (SELECT D.DistributionID, COUNT(*) AS COUNTER FROM SCORE G
	LEFT JOIN ASSIGNMENT A ON G.AssignmentID = A.AssignmentID
    JOIN DISTRIBUTION D ON D.DistributionID = A.DistributionID
    WHERE CourseID=1234 AND StudentID=30 GROUP BY
    D.DistributionID)
    C ON C.DistributionID = D.DistributionID
JOIN (SELECT D.DistributionID, COUNT(*) AS COUNTER FROM SCORE G
	LEFT JOIN ASSIGNMENT A ON G.AssignmentID = A.AssignmentID
    JOIN DISTRIBUTION D ON D.DistributionID = A.DistributionID
    WHERE CourseID=1234 AND StudentID=30 GROUP BY
    D.DistributionID)
    Z ON Z.DistributionID = D.DistributionID
WHERE CourseID=1234
AND StudentID=30;